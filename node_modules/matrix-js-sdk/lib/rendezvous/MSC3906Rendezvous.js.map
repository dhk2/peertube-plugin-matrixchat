{"version":3,"file":"MSC3906Rendezvous.js","names":["_matrixEventsSdk","require","_","_feature","_logger","_utils","PayloadType","Outcome","LOGIN_TOKEN_PROTOCOL","UnstableValue","MSC3906Rendezvous","constructor","channel","client","onFailure","_defineProperty2","default","RendezvousIntent","RECIPROCATE_LOGIN_ON_EXISTING_DEVICE","code","_code","generateCode","JSON","stringify","ourIntent","startAfterShowingCode","checksum","connect","logger","info","features","buildFeatureSupportMap","getVersions","get","Feature","LoginTokenRequest","ServerSupport","Unsupported","send","type","Finish","outcome","cancel","RendezvousFailureReason","HomeserverLacksSupport","undefined","Progress","protocols","name","protocol","receive","UnsupportedAlgorithm","Unknown","matches","payload","declineLoginOnExistingDevice","Declined","approveLoginOnExistingDevice","loginToken","login_token","homeserver","baseUrl","res","device_id","deviceId","device_key","deviceKey","Error","newDeviceId","newDeviceKey","verifyAndCrossSignDevice","deviceInfo","crypto","getFingerprint","userId","getUserId","setDeviceVerification","masterPublicKey","crossSigningInfo","getId","Verified","verifying_device_id","getDeviceId","verifying_device_key","getDeviceEd25519Key","master_key","verifyNewDeviceOnExistingDevice","timeout","getStoredDevice","sleep","reason","_this$onFailure","call","close","exports"],"sources":["../../src/rendezvous/MSC3906Rendezvous.ts"],"sourcesContent":["/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { UnstableValue } from \"matrix-events-sdk\";\n\nimport { RendezvousChannel, RendezvousFailureListener, RendezvousFailureReason, RendezvousIntent } from \".\";\nimport { MatrixClient } from \"../client\";\nimport { CrossSigningInfo } from \"../crypto/CrossSigning\";\nimport { DeviceInfo } from \"../crypto/deviceinfo\";\nimport { buildFeatureSupportMap, Feature, ServerSupport } from \"../feature\";\nimport { logger } from \"../logger\";\nimport { sleep } from \"../utils\";\n\nenum PayloadType {\n    Start = \"m.login.start\",\n    Finish = \"m.login.finish\",\n    Progress = \"m.login.progress\",\n}\n\nenum Outcome {\n    Success = \"success\",\n    Failure = \"failure\",\n    Verified = \"verified\",\n    Declined = \"declined\",\n    Unsupported = \"unsupported\",\n}\n\nexport interface MSC3906RendezvousPayload {\n    type: PayloadType;\n    intent?: RendezvousIntent;\n    outcome?: Outcome;\n    device_id?: string;\n    device_key?: string;\n    verifying_device_id?: string;\n    verifying_device_key?: string;\n    master_key?: string;\n    protocols?: string[];\n    protocol?: string;\n    login_token?: string;\n    homeserver?: string;\n}\n\nconst LOGIN_TOKEN_PROTOCOL = new UnstableValue(\"login_token\", \"org.matrix.msc3906.login_token\");\n\n/**\n * Implements MSC3906 to allow a user to sign in on a new device using QR code.\n * This implementation only supports generating a QR code on a device that is already signed in.\n * Note that this is UNSTABLE and may have breaking changes without notice.\n */\nexport class MSC3906Rendezvous {\n    private newDeviceId?: string;\n    private newDeviceKey?: string;\n    private ourIntent: RendezvousIntent = RendezvousIntent.RECIPROCATE_LOGIN_ON_EXISTING_DEVICE;\n    private _code?: string;\n\n    /**\n     * @param channel - The secure channel used for communication\n     * @param client - The Matrix client in used on the device already logged in\n     * @param onFailure - Callback for when the rendezvous fails\n     */\n    public constructor(\n        private channel: RendezvousChannel<MSC3906RendezvousPayload>,\n        private client: MatrixClient,\n        public onFailure?: RendezvousFailureListener,\n    ) {}\n\n    /**\n     * Returns the code representing the rendezvous suitable for rendering in a QR code or undefined if not generated yet.\n     */\n    public get code(): string | undefined {\n        return this._code;\n    }\n\n    /**\n     * Generate the code including doing partial set up of the channel where required.\n     */\n    public async generateCode(): Promise<void> {\n        if (this._code) {\n            return;\n        }\n\n        this._code = JSON.stringify(await this.channel.generateCode(this.ourIntent));\n    }\n\n    public async startAfterShowingCode(): Promise<string | undefined> {\n        const checksum = await this.channel.connect();\n\n        logger.info(`Connected to secure channel with checksum: ${checksum} our intent is ${this.ourIntent}`);\n\n        const features = await buildFeatureSupportMap(await this.client.getVersions());\n        // determine available protocols\n        if (features.get(Feature.LoginTokenRequest) === ServerSupport.Unsupported) {\n            logger.info(\"Server doesn't support MSC3882\");\n            await this.send({ type: PayloadType.Finish, outcome: Outcome.Unsupported });\n            await this.cancel(RendezvousFailureReason.HomeserverLacksSupport);\n            return undefined;\n        }\n\n        await this.send({ type: PayloadType.Progress, protocols: [LOGIN_TOKEN_PROTOCOL.name] });\n\n        logger.info(\"Waiting for other device to chose protocol\");\n        const { type, protocol, outcome } = await this.receive();\n\n        if (type === PayloadType.Finish) {\n            // new device decided not to complete\n            switch (outcome ?? \"\") {\n                case \"unsupported\":\n                    await this.cancel(RendezvousFailureReason.UnsupportedAlgorithm);\n                    break;\n                default:\n                    await this.cancel(RendezvousFailureReason.Unknown);\n            }\n            return undefined;\n        }\n\n        if (type !== PayloadType.Progress) {\n            await this.cancel(RendezvousFailureReason.Unknown);\n            return undefined;\n        }\n\n        if (!protocol || !LOGIN_TOKEN_PROTOCOL.matches(protocol)) {\n            await this.cancel(RendezvousFailureReason.UnsupportedAlgorithm);\n            return undefined;\n        }\n\n        return checksum;\n    }\n\n    private async receive(): Promise<MSC3906RendezvousPayload> {\n        return (await this.channel.receive()) as MSC3906RendezvousPayload;\n    }\n\n    private async send(payload: MSC3906RendezvousPayload): Promise<void> {\n        await this.channel.send(payload);\n    }\n\n    public async declineLoginOnExistingDevice(): Promise<void> {\n        logger.info(\"User declined sign in\");\n        await this.send({ type: PayloadType.Finish, outcome: Outcome.Declined });\n    }\n\n    public async approveLoginOnExistingDevice(loginToken: string): Promise<string | undefined> {\n        // eslint-disable-next-line camelcase\n        await this.send({ type: PayloadType.Progress, login_token: loginToken, homeserver: this.client.baseUrl });\n\n        logger.info(\"Waiting for outcome\");\n        const res = await this.receive();\n        if (!res) {\n            return undefined;\n        }\n        const { outcome, device_id: deviceId, device_key: deviceKey } = res;\n\n        if (outcome !== \"success\") {\n            throw new Error(\"Linking failed\");\n        }\n\n        this.newDeviceId = deviceId;\n        this.newDeviceKey = deviceKey;\n\n        return deviceId;\n    }\n\n    private async verifyAndCrossSignDevice(deviceInfo: DeviceInfo): Promise<CrossSigningInfo | DeviceInfo> {\n        if (!this.client.crypto) {\n            throw new Error(\"Crypto not available on client\");\n        }\n\n        if (!this.newDeviceId) {\n            throw new Error(\"No new device ID set\");\n        }\n\n        // check that keys received from the server for the new device match those received from the device itself\n        if (deviceInfo.getFingerprint() !== this.newDeviceKey) {\n            throw new Error(\n                `New device has different keys than expected: ${this.newDeviceKey} vs ${deviceInfo.getFingerprint()}`,\n            );\n        }\n\n        const userId = this.client.getUserId();\n\n        if (!userId) {\n            throw new Error(\"No user ID set\");\n        }\n        // mark the device as verified locally + cross sign\n        logger.info(`Marking device ${this.newDeviceId} as verified`);\n        const info = await this.client.crypto.setDeviceVerification(userId, this.newDeviceId, true, false, true);\n\n        const masterPublicKey = this.client.crypto.crossSigningInfo.getId(\"master\")!;\n\n        await this.send({\n            type: PayloadType.Finish,\n            outcome: Outcome.Verified,\n            verifying_device_id: this.client.getDeviceId()!,\n            verifying_device_key: this.client.getDeviceEd25519Key()!,\n            master_key: masterPublicKey,\n        });\n\n        return info;\n    }\n\n    /**\n     * Verify the device and cross-sign it.\n     * @param timeout - time in milliseconds to wait for device to come online\n     * @returns the new device info if the device was verified\n     */\n    public async verifyNewDeviceOnExistingDevice(\n        timeout = 10 * 1000,\n    ): Promise<DeviceInfo | CrossSigningInfo | undefined> {\n        if (!this.newDeviceId) {\n            throw new Error(\"No new device to sign\");\n        }\n\n        if (!this.newDeviceKey) {\n            logger.info(\"No new device key to sign\");\n            return undefined;\n        }\n\n        if (!this.client.crypto) {\n            throw new Error(\"Crypto not available on client\");\n        }\n\n        const userId = this.client.getUserId();\n\n        if (!userId) {\n            throw new Error(\"No user ID set\");\n        }\n\n        let deviceInfo = this.client.crypto.getStoredDevice(userId, this.newDeviceId);\n\n        if (!deviceInfo) {\n            logger.info(\"Going to wait for new device to be online\");\n            await sleep(timeout);\n            deviceInfo = this.client.crypto.getStoredDevice(userId, this.newDeviceId);\n        }\n\n        if (deviceInfo) {\n            return await this.verifyAndCrossSignDevice(deviceInfo);\n        }\n\n        throw new Error(\"Device not online within timeout\");\n    }\n\n    public async cancel(reason: RendezvousFailureReason): Promise<void> {\n        this.onFailure?.(reason);\n        await this.channel.cancel(reason);\n    }\n\n    public async close(): Promise<void> {\n        await this.channel.close();\n    }\n}\n"],"mappings":"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"}