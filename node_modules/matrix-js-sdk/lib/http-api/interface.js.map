{"version":3,"file":"interface.js","names":["HttpApiEvent","exports"],"sources":["../../src/http-api/interface.ts"],"sourcesContent":["/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { MatrixError } from \"./errors\";\n\nexport interface IHttpOpts {\n    fetchFn?: typeof global.fetch;\n\n    baseUrl: string;\n    idBaseUrl?: string;\n    prefix: string;\n    extraParams?: Record<string, string>;\n\n    accessToken?: string;\n    useAuthorizationHeader?: boolean; // defaults to true\n\n    onlyData?: boolean;\n    localTimeoutMs?: number;\n}\n\nexport interface IRequestOpts {\n    /**\n     * The alternative base url to use.\n     * If not specified, uses this.opts.baseUrl\n     */\n    baseUrl?: string;\n    /**\n     * The full prefix to use e.g.\n     * \"/_matrix/client/v2_alpha\". If not specified, uses this.opts.prefix.\n     */\n    prefix?: string;\n    /**\n     * map of additional request headers\n     */\n    headers?: Record<string, string>;\n    abortSignal?: AbortSignal;\n    /**\n     * The maximum amount of time to wait before\n     * timing out the request. If not specified, there is no timeout.\n     */\n    localTimeoutMs?: number;\n    keepAlive?: boolean; // defaults to false\n    json?: boolean; // defaults to true\n\n    // Set to true to prevent the request function from emitting a Session.logged_out event.\n    // This is intended for use on endpoints where M_UNKNOWN_TOKEN is a valid/notable error response,\n    // such as with token refreshes.\n    inhibitLogoutEmit?: boolean;\n}\n\nexport interface IContentUri {\n    base: string;\n    path: string;\n    params: {\n        // eslint-disable-next-line camelcase\n        access_token: string;\n    };\n}\n\nexport enum HttpApiEvent {\n    SessionLoggedOut = \"Session.logged_out\",\n    NoConsent = \"no_consent\",\n}\n\nexport type HttpApiEventHandlerMap = {\n    /**\n     * Fires whenever the login session the JS SDK is using is no\n     * longer valid and the user must log in again.\n     * NB. This only fires when action is required from the user, not\n     * when then login session can be renewed by using a refresh token.\n     * @example\n     * ```\n     * matrixClient.on(\"Session.logged_out\", function(errorObj){\n     *   // show the login screen\n     * });\n     * ```\n     */\n    [HttpApiEvent.SessionLoggedOut]: (err: MatrixError) => void;\n    /**\n     * Fires when the JS SDK receives a M_CONSENT_NOT_GIVEN error in response\n     * to a HTTP request.\n     * @example\n     * ```\n     * matrixClient.on(\"no_consent\", function(message, contentUri) {\n     *     console.info(message + ' Go to ' + contentUri);\n     * });\n     * ```\n     */\n    [HttpApiEvent.NoConsent]: (message: string, consentUri: string) => void;\n};\n\nexport interface UploadProgress {\n    loaded: number;\n    total: number;\n}\n\nexport interface UploadOpts {\n    /**\n     * Name to give the file on the server. Defaults to <tt>file.name</tt>.\n     */\n    name?: string;\n    /**\n     * Content-type for the upload. Defaults to\n     *   <tt>file.type</tt>, or <tt>applicaton/octet-stream</tt>.\n     */\n    type?: string;\n    /**\n     * if false will not send the filename,\n     *   e.g for encrypted file uploads where filename leaks are undesirable.\n     *   Defaults to true.\n     */\n    includeFilename?: boolean;\n    /**\n     * Optional. Called when a chunk of\n     *    data has been uploaded, with an object containing the fields `loaded`\n     *    (number of bytes transferred) and `total` (total size, if known).\n     */\n    progressHandler?(progress: UploadProgress): void;\n    abortController?: AbortController;\n}\n\nexport interface Upload {\n    loaded: number;\n    total: number;\n    promise: Promise<UploadResponse>;\n    abortController: AbortController;\n}\n\nexport interface UploadResponse {\n    // eslint-disable-next-line camelcase\n    content_uri: string;\n}\n\nexport type FileType = XMLHttpRequestBodyInit;\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA,IAwEYA,YAAY;AAAAC,OAAA,CAAAD,YAAA,GAAAA,YAAA;AAAA,WAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;AAAA,GAAZA,YAAY,KAAAC,OAAA,CAAAD,YAAA,GAAZA,YAAY"}