{"version":3,"file":"ExtensibleEvent.js","names":["ExtensibleEvent","constructor","wireFormat","wireContent","content","exports"],"sources":["../../src/extensible_events_v1/ExtensibleEvent.ts"],"sourcesContent":["/*\nCopyright 2021 - 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { ExtensibleEventType, IPartialEvent } from \"../@types/extensible_events\";\n\n/**\n * Represents an Extensible Event in Matrix.\n */\nexport abstract class ExtensibleEvent<TContent extends object = object> {\n    protected constructor(public readonly wireFormat: IPartialEvent<TContent>) {}\n\n    /**\n     * Shortcut to wireFormat.content\n     */\n    public get wireContent(): TContent {\n        return this.wireFormat.content;\n    }\n\n    /**\n     * Serializes the event into a format which can be used to send the\n     * event to the room.\n     * @returns The serialized event.\n     */\n    public abstract serialize(): IPartialEvent<object>;\n\n    /**\n     * Determines if this event is equivalent to the provided event type.\n     * This is recommended over `instanceof` checks due to issues in the JS\n     * runtime (and layering of dependencies in some projects).\n     *\n     * Implementations should pass this check off to their super classes\n     * if their own checks fail. Some primary implementations do not extend\n     * fallback classes given they support the primary type first. Thus,\n     * those classes may return false if asked about their fallback\n     * representation.\n     *\n     * Note that this only checks primary event types: legacy events, like\n     * m.room.message, should/will fail this check.\n     * @param primaryEventType - The (potentially namespaced) event\n     * type.\n     * @returns True if this event *could* be represented as the\n     * given type.\n     */\n    public abstract isEquivalentTo(primaryEventType: ExtensibleEventType): boolean;\n}\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACO,MAAeA,eAAe,CAAmC;EAC1DC,WAAWA,CAAiBC,UAAmC,EAAE;IAAA,KAArCA,UAAmC,GAAnCA,UAAmC;EAAG;;EAE5E;AACJ;AACA;EACI,IAAWC,WAAWA,CAAA,EAAa;IAC/B,OAAO,IAAI,CAACD,UAAU,CAACE,OAAO;EAClC;;EAEA;AACJ;AACA;AACA;AACA;AAsBA;AAACC,OAAA,CAAAL,eAAA,GAAAA,eAAA"}