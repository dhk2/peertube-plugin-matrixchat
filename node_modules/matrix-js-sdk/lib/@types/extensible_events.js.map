{"version":3,"file":"extensible_events.js","names":["_matrixEventsSdk","require","_utilities","M_MESSAGE","UnstableValue","exports","M_TEXT","M_HTML","REFERENCE_RELATION","NamespacedValue","isEventTypeSame","given","expected","matches","expectedNs","givenNs","name","isProvided","altName"],"sources":["../../src/@types/extensible_events.ts"],"sourcesContent":["/*\nCopyright 2021 - 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { EitherAnd, NamespacedValue, Optional, UnstableValue } from \"matrix-events-sdk\";\n\nimport { isProvided } from \"../extensible_events_v1/utilities\";\n\n// Types and utilities for MSC1767: Extensible events (version 1) in Matrix\n\n/**\n * Represents the stable and unstable values of a given namespace.\n */\nexport type TSNamespace<N> = N extends NamespacedValue<infer S, infer U>\n    ? TSNamespaceValue<S> | TSNamespaceValue<U>\n    : never;\n\n/**\n * Represents a namespaced value, if the value is a string. Used to extract provided types\n * from a TSNamespace<N> (in cases where only stable *or* unstable is provided).\n */\nexport type TSNamespaceValue<V> = V extends string ? V : never;\n\n/**\n * Creates a type which is V when T is `never`, otherwise T.\n */\n// See https://github.com/microsoft/TypeScript/issues/23182#issuecomment-379091887 for details on the array syntax.\nexport type DefaultNever<T, V> = [T] extends [never] ? V : T;\n\n/**\n * The namespaced value for m.message\n */\nexport const M_MESSAGE = new UnstableValue(\"m.message\", \"org.matrix.msc1767.message\");\n\n/**\n * An m.message event rendering\n */\nexport interface IMessageRendering {\n    body: string;\n    mimetype?: string;\n}\n\n/**\n * The content for an m.message event\n */\nexport type ExtensibleMessageEventContent = EitherAnd<\n    { [M_MESSAGE.name]: IMessageRendering[] },\n    { [M_MESSAGE.altName]: IMessageRendering[] }\n>;\n\n/**\n * The namespaced value for m.text\n */\nexport const M_TEXT = new UnstableValue(\"m.text\", \"org.matrix.msc1767.text\");\n\n/**\n * The content for an m.text event\n */\nexport type TextEventContent = EitherAnd<{ [M_TEXT.name]: string }, { [M_TEXT.altName]: string }>;\n\n/**\n * The namespaced value for m.html\n */\nexport const M_HTML = new UnstableValue(\"m.html\", \"org.matrix.msc1767.html\");\n\n/**\n * The content for an m.html event\n */\nexport type HtmlEventContent = EitherAnd<{ [M_HTML.name]: string }, { [M_HTML.altName]: string }>;\n\n/**\n * The content for an m.message, m.text, or m.html event\n */\nexport type ExtensibleAnyMessageEventContent = ExtensibleMessageEventContent | TextEventContent | HtmlEventContent;\n\n/**\n * The namespaced value for an m.reference relation\n */\nexport const REFERENCE_RELATION = new NamespacedValue(\"m.reference\");\n\n/**\n * Represents any relation type\n */\nexport type AnyRelation = TSNamespace<typeof REFERENCE_RELATION> | string;\n\n/**\n * An m.relates_to relationship\n */\nexport type RelatesToRelationship<R = never, C = never> = {\n    \"m.relates_to\": {\n        // See https://github.com/microsoft/TypeScript/issues/23182#issuecomment-379091887 for array syntax\n        rel_type: [R] extends [never] ? AnyRelation : TSNamespace<R>;\n        event_id: string;\n    } & DefaultNever<C, {}>;\n};\n\n/**\n * Partial types for a Matrix Event.\n */\nexport interface IPartialEvent<TContent> {\n    type: string;\n    content: TContent;\n}\n\n/**\n * Represents a potentially namespaced event type.\n */\nexport type ExtensibleEventType = NamespacedValue<string, string> | string;\n\n/**\n * Determines if two event types are the same, including namespaces.\n * @param given - The given event type. This will be compared\n * against the expected type.\n * @param expected - The expected event type.\n * @returns True if the given type matches the expected type.\n */\nexport function isEventTypeSame(\n    given: Optional<ExtensibleEventType>,\n    expected: Optional<ExtensibleEventType>,\n): boolean {\n    if (typeof given === \"string\") {\n        if (typeof expected === \"string\") {\n            return expected === given;\n        } else {\n            return (expected as NamespacedValue<string, string>).matches(given as string);\n        }\n    } else {\n        if (typeof expected === \"string\") {\n            return (given as NamespacedValue<string, string>).matches(expected as string);\n        } else {\n            const expectedNs = expected as NamespacedValue<string, string>;\n            const givenNs = given as NamespacedValue<string, string>;\n            return (\n                expectedNs.matches(givenNs.name) ||\n                (isProvided(givenNs.altName) && expectedNs.matches(givenNs.altName!))\n            );\n        }\n    }\n}\n"],"mappings":";;;;;;;AAgBA,IAAAA,gBAAA,GAAAC,OAAA;AAEA,IAAAC,UAAA,GAAAD,OAAA;AAlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA2BA;AACA;AACA;AACO,MAAME,SAAS,GAAG,IAAIC,8BAAa,CAAC,WAAW,EAAE,4BAA4B,CAAC;;AAErF;AACA;AACA;AAFAC,OAAA,CAAAF,SAAA,GAAAA,SAAA;AAgBA;AACA;AACA;AACO,MAAMG,MAAM,GAAG,IAAIF,8BAAa,CAAC,QAAQ,EAAE,yBAAyB,CAAC;;AAE5E;AACA;AACA;AAFAC,OAAA,CAAAC,MAAA,GAAAA,MAAA;AAKA;AACA;AACA;AACO,MAAMC,MAAM,GAAG,IAAIH,8BAAa,CAAC,QAAQ,EAAE,yBAAyB,CAAC;;AAE5E;AACA;AACA;AAFAC,OAAA,CAAAE,MAAA,GAAAA,MAAA;AAUA;AACA;AACA;AACO,MAAMC,kBAAkB,GAAG,IAAIC,gCAAe,CAAC,aAAa,CAAC;;AAEpE;AACA;AACA;AAFAJ,OAAA,CAAAG,kBAAA,GAAAA,kBAAA;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,eAAeA,CAC3BC,KAAoC,EACpCC,QAAuC,EAChC;EACP,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;IAC3B,IAAI,OAAOC,QAAQ,KAAK,QAAQ,EAAE;MAC9B,OAAOA,QAAQ,KAAKD,KAAK;IAC7B,CAAC,MAAM;MACH,OAAQC,QAAQ,CAAqCC,OAAO,CAACF,KAAK,CAAW;IACjF;EACJ,CAAC,MAAM;IACH,IAAI,OAAOC,QAAQ,KAAK,QAAQ,EAAE;MAC9B,OAAQD,KAAK,CAAqCE,OAAO,CAACD,QAAQ,CAAW;IACjF,CAAC,MAAM;MACH,MAAME,UAAU,GAAGF,QAA2C;MAC9D,MAAMG,OAAO,GAAGJ,KAAwC;MACxD,OACIG,UAAU,CAACD,OAAO,CAACE,OAAO,CAACC,IAAI,CAAC,IAC/B,IAAAC,qBAAU,EAACF,OAAO,CAACG,OAAO,CAAC,IAAIJ,UAAU,CAACD,OAAO,CAACE,OAAO,CAACG,OAAO,CAAG;IAE7E;EACJ;AACJ"}