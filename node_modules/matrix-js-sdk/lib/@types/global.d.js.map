{"version":3,"file":"global.d.js","names":["require"],"sources":["../../src/@types/global.d.ts"],"sourcesContent":["/*\nCopyright 2020 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n// this is needed to tell TS about global.Olm\nimport \"@matrix-org/olm\";\n\nexport {};\n\ndeclare global {\n    // use `number` as the return type in all cases for global.set{Interval,Timeout},\n    // so we don't accidentally use the methods on NodeJS.Timeout - they only exist in a subset of environments.\n    // The overload for clear{Interval,Timeout} is resolved as expected.\n    // We use `ReturnType<typeof setTimeout>` in the code to be agnostic of if this definition gets loaded.\n    function setInterval(handler: TimerHandler, timeout: number, ...arguments: any[]): number;\n    function setTimeout(handler: TimerHandler, timeout: number, ...arguments: any[]): number;\n\n    namespace NodeJS {\n        interface Global {\n            localStorage: Storage;\n            // marker variable used to detect both the browser & node entrypoints being used at once\n            __js_sdk_entrypoint: unknown;\n        }\n    }\n\n    interface Window {\n        webkitAudioContext: typeof AudioContext;\n    }\n\n    interface Crypto {\n        webkitSubtle?: Window[\"crypto\"][\"subtle\"];\n    }\n\n    interface MediaDevices {\n        // This is experimental and types don't know about it yet\n        // https://github.com/microsoft/TypeScript/issues/33232\n        getDisplayMedia(constraints: MediaStreamConstraints | DesktopCapturerConstraints): Promise<MediaStream>;\n        getUserMedia(constraints: MediaStreamConstraints | DesktopCapturerConstraints): Promise<MediaStream>;\n    }\n\n    interface DesktopCapturerConstraints {\n        audio:\n            | boolean\n            | {\n                  mandatory: {\n                      chromeMediaSource: string;\n                      chromeMediaSourceId: string;\n                  };\n              };\n        video:\n            | boolean\n            | {\n                  mandatory: {\n                      chromeMediaSource: string;\n                      chromeMediaSourceId: string;\n                  };\n              };\n    }\n\n    interface DummyInterfaceWeShouldntBeUsingThis {}\n\n    interface Navigator {\n        // We check for the webkit-prefixed getUserMedia to detect if we're\n        // on webkit: we should check if we still need to do this\n        webkitGetUserMedia: DummyInterfaceWeShouldntBeUsingThis;\n    }\n\n    export interface ISettledFulfilled<T> {\n        status: \"fulfilled\";\n        value: T;\n    }\n    export interface ISettledRejected {\n        status: \"rejected\";\n        reason: any;\n    }\n\n    interface PromiseConstructor {\n        allSettled<T>(promises: Promise<T>[]): Promise<Array<ISettledFulfilled<T> | ISettledRejected>>;\n    }\n\n    interface RTCRtpTransceiver {\n        // This has been removed from TS\n        // (https://github.com/microsoft/TypeScript-DOM-lib-generator/issues/1029),\n        // but we still need this for MatrixCall::getRidOfRTXCodecs()\n        setCodecPreferences(codecs: RTCRtpCodecCapability[]): void;\n    }\n}\n"],"mappings":";;;;;AAiBAA,OAAA"}