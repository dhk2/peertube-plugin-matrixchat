{"version":3,"file":"PushRules.js","names":["PushRuleActionName","exports","TweakName","ConditionOperator","DMMemberCountCondition","isDmMemberCountCondition","condition","ConditionKind","PushRuleKind","RuleId"],"sources":["../../src/@types/PushRules.ts"],"sourcesContent":["/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n// allow camelcase as these are things that go onto the wire\n/* eslint-disable camelcase */\n\nexport enum PushRuleActionName {\n    DontNotify = \"dont_notify\",\n    Notify = \"notify\",\n    Coalesce = \"coalesce\",\n}\n\nexport enum TweakName {\n    Highlight = \"highlight\",\n    Sound = \"sound\",\n}\n\nexport type Tweak<N extends TweakName, V> = {\n    set_tweak: N;\n    value?: V;\n};\n\nexport type TweakHighlight = Tweak<TweakName.Highlight, boolean>;\nexport type TweakSound = Tweak<TweakName.Sound, string>;\n\nexport type Tweaks = TweakHighlight | TweakSound;\n\nexport enum ConditionOperator {\n    ExactEquals = \"==\",\n    LessThan = \"<\",\n    GreaterThan = \">\",\n    GreaterThanOrEqual = \">=\",\n    LessThanOrEqual = \"<=\",\n}\n\nexport type PushRuleAction = Tweaks | PushRuleActionName;\n\nexport type MemberCountCondition<N extends number, Op extends ConditionOperator = ConditionOperator.ExactEquals> =\n    | `${Op}${N}`\n    | (Op extends ConditionOperator.ExactEquals ? `${N}` : never);\n\nexport type AnyMemberCountCondition = MemberCountCondition<number, ConditionOperator>;\n\nexport const DMMemberCountCondition: MemberCountCondition<2> = \"2\";\n\nexport function isDmMemberCountCondition(condition: AnyMemberCountCondition): boolean {\n    return condition === \"==2\" || condition === \"2\";\n}\n\nexport enum ConditionKind {\n    EventMatch = \"event_match\",\n    EventPropertyIs = \"event_property_is\",\n    ContainsDisplayName = \"contains_display_name\",\n    RoomMemberCount = \"room_member_count\",\n    SenderNotificationPermission = \"sender_notification_permission\",\n    CallStarted = \"call_started\",\n    CallStartedPrefix = \"org.matrix.msc3914.call_started\",\n}\n\nexport interface IPushRuleCondition<N extends ConditionKind | string> {\n    [k: string]: any; // for custom conditions, there can be other fields here\n    kind: N;\n}\n\nexport interface IEventMatchCondition extends IPushRuleCondition<ConditionKind.EventMatch> {\n    key: string;\n    pattern?: string;\n    // Note that value property is an optimization for patterns which do not do\n    // any globbing and when the key is not \"content.body\".\n    value?: string;\n}\n\nexport interface IEventPropertyIsCondition extends IPushRuleCondition<ConditionKind.EventPropertyIs> {\n    key: string;\n    value: string | boolean | null | number;\n}\n\nexport interface IContainsDisplayNameCondition extends IPushRuleCondition<ConditionKind.ContainsDisplayName> {\n    // no additional fields\n}\n\nexport interface IRoomMemberCountCondition extends IPushRuleCondition<ConditionKind.RoomMemberCount> {\n    is: AnyMemberCountCondition;\n}\n\nexport interface ISenderNotificationPermissionCondition\n    extends IPushRuleCondition<ConditionKind.SenderNotificationPermission> {\n    key: string;\n}\n\nexport interface ICallStartedCondition extends IPushRuleCondition<ConditionKind.CallStarted> {\n    // no additional fields\n}\n\nexport interface ICallStartedPrefixCondition extends IPushRuleCondition<ConditionKind.CallStartedPrefix> {\n    // no additional fields\n}\n\n// XXX: custom conditions are possible but always fail, and break the typescript discriminated union so ignore them here\n// IPushRuleCondition<Exclude<string, ConditionKind>> unfortunately does not resolve this at the time of writing.\nexport type PushRuleCondition =\n    | IEventMatchCondition\n    | IEventPropertyIsCondition\n    | IContainsDisplayNameCondition\n    | IRoomMemberCountCondition\n    | ISenderNotificationPermissionCondition\n    | ICallStartedCondition\n    | ICallStartedPrefixCondition;\n\nexport enum PushRuleKind {\n    Override = \"override\",\n    ContentSpecific = \"content\",\n    RoomSpecific = \"room\",\n    SenderSpecific = \"sender\",\n    Underride = \"underride\",\n}\n\nexport enum RuleId {\n    Master = \".m.rule.master\",\n    ContainsDisplayName = \".m.rule.contains_display_name\",\n    ContainsUserName = \".m.rule.contains_user_name\",\n    AtRoomNotification = \".m.rule.roomnotif\",\n    DM = \".m.rule.room_one_to_one\",\n    EncryptedDM = \".m.rule.encrypted_room_one_to_one\",\n    Message = \".m.rule.message\",\n    EncryptedMessage = \".m.rule.encrypted\",\n    InviteToSelf = \".m.rule.invite_for_me\",\n    MemberEvent = \".m.rule.member_event\",\n    IncomingCall = \".m.rule.call\",\n    SuppressNotices = \".m.rule.suppress_notices\",\n    Tombstone = \".m.rule.tombstone\",\n    PollStart = \".m.rule.poll_start\",\n    PollStartUnstable = \".org.matrix.msc3930.rule.poll_start\",\n    PollEnd = \".m.rule.poll_end\",\n    PollEndUnstable = \".org.matrix.msc3930.rule.poll_end\",\n    PollStartOneToOne = \".m.rule.poll_start_one_to_one\",\n    PollStartOneToOneUnstable = \".org.matrix.msc3930.rule.poll_start_one_to_one\",\n    PollEndOneToOne = \".m.rule.poll_end_one_to_one\",\n    PollEndOneToOneUnstable = \".org.matrix.msc3930.rule.poll_end_one_to_one\",\n}\n\nexport type PushRuleSet = {\n    [k in PushRuleKind]?: IPushRule[];\n};\n\nexport interface IPushRule {\n    actions: PushRuleAction[];\n    conditions?: PushRuleCondition[];\n    default: boolean;\n    enabled: boolean;\n    pattern?: string;\n    rule_id: RuleId | string;\n}\n\nexport interface IAnnotatedPushRule extends IPushRule {\n    kind: PushRuleKind;\n}\n\nexport interface IPushRules {\n    global: PushRuleSet;\n    device?: PushRuleSet;\n}\n\nexport interface IPusher {\n    \"app_display_name\": string;\n    \"app_id\": string;\n    \"data\": {\n        format?: string;\n        url?: string; // TODO: Required if kind==http\n        brand?: string; // TODO: For email notifications only? Unspecced field\n    };\n    \"device_display_name\": string;\n    \"kind\": \"http\" | string;\n    \"lang\": string;\n    \"profile_tag\"?: string;\n    \"pushkey\": string;\n    \"enabled\"?: boolean | null;\n    \"org.matrix.msc3881.enabled\"?: boolean | null;\n    \"device_id\"?: string | null;\n    \"org.matrix.msc3881.device_id\"?: string | null;\n}\n\nexport interface IPusherRequest extends Omit<IPusher, \"device_id\" | \"org.matrix.msc3881.device_id\"> {\n    append?: boolean;\n}\n\n/* eslint-enable camelcase */\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA,IAEYA,kBAAkB;AAAAC,OAAA,CAAAD,kBAAA,GAAAA,kBAAA;AAAA,WAAlBA,kBAAkB;EAAlBA,kBAAkB;EAAlBA,kBAAkB;EAAlBA,kBAAkB;AAAA,GAAlBA,kBAAkB,KAAAC,OAAA,CAAAD,kBAAA,GAAlBA,kBAAkB;AAAA,IAMlBE,SAAS;AAAAD,OAAA,CAAAC,SAAA,GAAAA,SAAA;AAAA,WAATA,SAAS;EAATA,SAAS;EAATA,SAAS;AAAA,GAATA,SAAS,KAAAD,OAAA,CAAAC,SAAA,GAATA,SAAS;AAAA,IAeTC,iBAAiB;AAAAF,OAAA,CAAAE,iBAAA,GAAAA,iBAAA;AAAA,WAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;AAAA,GAAjBA,iBAAiB,KAAAF,OAAA,CAAAE,iBAAA,GAAjBA,iBAAiB;AAgBtB,MAAMC,sBAA+C,GAAG,GAAG;AAACH,OAAA,CAAAG,sBAAA,GAAAA,sBAAA;AAE5D,SAASC,wBAAwBA,CAACC,SAAkC,EAAW;EAClF,OAAOA,SAAS,KAAK,KAAK,IAAIA,SAAS,KAAK,GAAG;AACnD;AAAC,IAEWC,aAAa;AAAAN,OAAA,CAAAM,aAAA,GAAAA,aAAA;AAAA,WAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;AAAA,GAAbA,aAAa,KAAAN,OAAA,CAAAM,aAAA,GAAbA,aAAa;AAAA,IA4DbC,YAAY;AAAAP,OAAA,CAAAO,YAAA,GAAAA,YAAA;AAAA,WAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;AAAA,GAAZA,YAAY,KAAAP,OAAA,CAAAO,YAAA,GAAZA,YAAY;AAAA,IAQZC,MAAM;AAAAR,OAAA,CAAAQ,MAAA,GAAAA,MAAA;AAAA,WAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;AAAA,GAANA,MAAM,KAAAR,OAAA,CAAAQ,MAAA,GAANA,MAAM;AAqElB"}