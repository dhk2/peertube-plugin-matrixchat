{"version":3,"file":"crypto.js","names":[],"sources":["../../src/@types/crypto.ts"],"sourcesContent":["/*\nCopyright 2022-2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport type { IClearEvent } from \"../models/event\";\nimport type { ISignatures } from \"./signed\";\n\nexport type OlmGroupSessionExtraData = {\n    untrusted?: boolean;\n    sharedHistory?: boolean;\n};\n\n/**\n * The result of a (successful) call to {@link Crypto.decryptEvent}\n */\nexport interface IEventDecryptionResult {\n    /**\n     * The plaintext payload for the event (typically containing <tt>type</tt> and <tt>content</tt> fields).\n     */\n    clearEvent: IClearEvent;\n    /**\n     * List of curve25519 keys involved in telling us about the senderCurve25519Key and claimedEd25519Key.\n     * See {@link MatrixEvent#getForwardingCurve25519KeyChain}.\n     */\n    forwardingCurve25519KeyChain?: string[];\n    /**\n     * Key owned by the sender of this event.  See {@link MatrixEvent#getSenderKey}.\n     */\n    senderCurve25519Key?: string;\n    /**\n     * ed25519 key claimed by the sender of this event. See {@link MatrixEvent#getClaimedEd25519Key}.\n     */\n    claimedEd25519Key?: string;\n    untrusted?: boolean;\n    /**\n     * The sender doesn't authorize the unverified devices to decrypt his messages\n     */\n    encryptedDisabledForUnverifiedDevices?: boolean;\n}\n\ninterface Extensible {\n    [key: string]: any;\n}\n\n/* eslint-disable camelcase */\n\n/** The result of a call to {@link MatrixClient.exportRoomKeys} */\nexport interface IMegolmSessionData extends Extensible {\n    /** Sender's Curve25519 device key */\n    sender_key: string;\n    /** Devices which forwarded this session to us (normally empty). */\n    forwarding_curve25519_key_chain: string[];\n    /** Other keys the sender claims. */\n    sender_claimed_keys: Record<string, string>;\n    /** Room this session is used in */\n    room_id: string;\n    /** Unique id for the session */\n    session_id: string;\n    /** Base64'ed key data */\n    session_key: string;\n    algorithm?: string;\n    untrusted?: boolean;\n}\n\n/* eslint-enable camelcase */\n\n/** the type of the `device_keys` parameter on `/_matrix/client/v3/keys/upload`\n *\n * @see https://spec.matrix.org/v1.5/client-server-api/#post_matrixclientv3keysupload\n */\nexport interface IDeviceKeys {\n    algorithms: Array<string>;\n    device_id: string; // eslint-disable-line camelcase\n    user_id: string; // eslint-disable-line camelcase\n    keys: Record<string, string>;\n    signatures?: ISignatures;\n}\n\n/** the type of the `one_time_keys` and `fallback_keys` parameters on `/_matrix/client/v3/keys/upload`\n *\n * @see https://spec.matrix.org/v1.5/client-server-api/#post_matrixclientv3keysupload\n */\nexport interface IOneTimeKey {\n    key: string;\n    fallback?: boolean;\n    signatures?: ISignatures;\n}\n"],"mappings":""}